"====== BinOp言語 ======"
"==== 概要 ===="
"== 特徴 =="
"プロトタイプベースのオブジェクト指向言語"
"文法はioというプログラミング言語に影響を受けている"
"この言語は数値、文字列、関数以外のだいたいを2項演算子で表現している"

"== 名前の由来 =="
"2項演算子は英語でBINary OPerator(2項演算子)。略してBinOp言語"

"==== サンプルプログラム ===="
"== コメント =="
"BinOp言語にはコメントがないので、プログラムに影響の無い位置に文字列を置く"

"== 数値 =="
1
123
"少数、マイナスのリテラルはないので計算で作る"
1/10; "=> 0.1"
0-1; "=> -1"

"== 文字列 =="
"文字列にダブルクォーテーションを含めることはできない"
"Hello world!"
"ab" + "cd"; "=> abcd"
"ab" + 12; "=> ab12"
"abcd" / 2; "=> ab"
"abcd" % 2; "=> cd"

"== 真偽値 =="
nil; "nilは偽を表す唯一の値"
0; ""; "数値、文字列は全て真"
1 > 0; "比較演算子は、偽の場合nilを返し、正の場合非nilを返す"

"== 変数 =="
v := 1; "変数の宣言"
v = v + 5; "再代入"
v.print(); "=> 6と表示"

"== 2項演算子 =="
"定義されている2項演算子は以下の通り"
"すべて左結合で、上の方が結合が強い"
"."
"* / %"
"+ -"
"< > <= >="
"== !="
"&& ||"
":= ="
"ユーザ定義2項演算子(後述)"
";"
","

n := 1 + (2 - 3) * 4; "n.:=(1.+((2.-(3)).*(4)))と解釈される"
n.print(); "=> -3と表示"

"== セミコロンと改行 =="
"どちらも順次処理を行う2項演算子"
"a;b は、a.;(b)と解釈され、a、bの順番に評価が行われる"
"first".print();"second".print(); "=> first,secondの順に表示"

"== 条件分岐 =="
(n==7).if(
  "seven",
  "not seven"
).print(); "=> not sevenと表示"

"== 関数 =="
addPrint := fun(a,b,
  result := a+b
  result.print()
  "最後に評価した値が戻り値になる"
  result)
addPrint(3,6); "=> 9と表示"

"== 繰り返し処理 =="
"ループ表現は無く、再帰のみで繰り返し処理を行う"
factorial := fun(n,
  (n>1).if(
    n * factorial(n-1),
    1))
factorial(4).print(); "=> 24と表示(4! = 24)"

"== クロージャ =="
makeCounter := fun(n:=0;fun(n=n+1))
counter := makeCounter()
counter().print(); "=> 1が表示される"
counter().print(); "=> 2が表示される"

"== オブジェクトの作成とクローン =="
Dog := fun(name,age,
  dogClass := Object.clone()
  "objectのプロパティへの代入は=と:=のどちらを使っても構わない"
  dogClass.name = name
  dogClass.age := age
  dogClass.greet = fun("I'm " + this.name)
  dogClass)

dog1 := Dog("Foo", 10)
dog2 := dog1.clone(); "直接オブジェクトをクローンしてもいい"
dog2.name = "Bar";  "objectのslotへの代入はクローン元に影響しない"
dog2.age = 6
dog3 := Dog("Baz", 1)

dog1.greet().print(); "=> I'm Fooと表示"
dog2.greet().print(); "=> I'm Barと表示"
dog3.greet().print(); "=> I'm Bazと表示"

"== 継承 =="
BaseClass := Object.clone()
BaseClass.func := fun(1+2)
SubClass := BaseClass.clone()
instance := SubClass.clone()
instance.func().print(); "=> 3と表示"

"== ユーザ定義2項演算子 =="
o := Object.clone()
o.setValue = fun(x,this.value = x)
o setValue 123; "o.setValue(123)と解釈される"
o.value.print(); "=> 123と表示"

"== データ構造の例 =="
"組み込みのデータ構造はObjectしか無い"
Cell := fun(a,b,
	cellClass := Object.clone()
	cellClass.head := a
	cellClass.tail := b
	cellClass)
list := fun(i,n,
	(i<n).if(
		Cell(i,list(i+1,n)),
		nil))
sum := fun(lst,
	(lst).if(
		lst.head + sum(lst.tail),
		0));

numbers := list(0,5)
numbers.print(); "=> 0,1,2,3,4を表すリストを表示"
sum(numbers).print(); "=> 10を表示"

"== messageの生成 =="
"第1引数はオプション。以下の4種類。ちょっと複雑"
"__"; "targetなし、呼び出しなし"
"_@"; "targetなし、呼び出しあり"
"@_"; "targetあり、呼び出しなし"
"@@"; "targetあり、呼び出しあり"


"== eval =="
evalNode(message("@@",5,"+",7)); "=> 12"
evalStr("5+7"); "=> 12"

"== マクロ =="
while := macro(cond,block,
  f:=fun(cond,block,
    evalNode(cond).if(
      evalNode(block);
      f(cond,block),
      nil));
  f(cond,block))

x := 0
while(x<10,
  x.print();x=x+1); "=> 0,1,2,3,4,5,6,7,8,9と、改行しながら表示"


"==== Todo ===="
"末尾再起の最適化"
"VMでの実行"
"もっとプロトタイプベースのオブジェクト指向言語にする"